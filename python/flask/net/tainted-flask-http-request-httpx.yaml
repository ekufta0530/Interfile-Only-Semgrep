rules:
- id: tainted-flask-http-request-httpx
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - net::sink::http-request::httpx
    - web::source::cookie::flask
    - web::source::form-data::flask
    - web::source::form-data::flask-wtf
    - web::source::form-data::wtforms
    - web::source::header::flask
    - web::source::http-body::flask
    - web::source::http-params::flask
    - web::source::url-path-params::flask
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    technology:
    - flask
    - flask-wtf
    - httpx
    - web
    - wtforms
  languages:
  - python
  mode: taint
  options:
    interfile: true
    symbolic_propagation: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern: flask.request.$FUNC()
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(from_values|get_data|get_json)$
    - patterns:
      - pattern-either:
        - pattern: flask.request.$PROPERTY
        - pattern: flask.request.$PROPERTY[...]
        - pattern: flask.request.$PROPERTY.get(...)
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
    - patterns:
      - pattern: "@$APP.$ROUTE\ndef $FUNC(..., $PARAM, ...):\n  ...\n"
      - metavariable-regex:
          metavariable: $ROUTE
          regex: ^(endpoint)$
      - focus-metavariable: $PARAM
  - patterns:
    - pattern: "@$APP.$ROUTE(...)\ndef $FUNC(..., $PARAM, ...):\n  ...\n"
    - metavariable-regex:
        metavariable: $ROUTE
        regex: ^(route|delete|get|patch|post|put)$
    - focus-metavariable: $PARAM
  - patterns:
    - pattern-inside: "@$APP.$ROUTE(...)\ndef $FUNC(...):\n  ...\n"
    - pattern: $FORM.$FIELD.data
    - metavariable-regex:
        metavariable: $ROUTE
        regex: ^(route|delete|get|patch|post|put|endpoint)$
    - metavariable-type:
        metavariable: $FORM
        type: FlaskForm
  - label: HTTPX_ASYNC
    patterns:
    - patterns:
      - pattern-either:
        - pattern: httpx.AsyncClient(...)
        - pattern: httpx.client.AsyncClient(...)
        - pattern: httpx._client.AsyncClient(...)
  pattern-propagators:
  - from: $DEFAULT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$DICT[$KEY]

            ...

            '
        - pattern-inside: '$DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$DICT = { ... }

            ...

            '
        - pattern-inside: '$DICT = dict(...)

            ...

            '
      - pattern-either:
        - pattern: $DICT.get($FIELD, $DEFAULT)
        - pattern: $DICT.setdefault($KEY, $DEFAULT)
    to: $DICT
  - from: $FROM_DICT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$TO_DICT[$KEY]

            ...

            '
        - pattern-inside: '$TO_DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$TO_DICT = { ... }

            ...

            '
        - pattern-inside: '$TO_DICT = dict(...)

            ...

            '
        - pattern-inside: '$FROM_DICT[$KEY]

            ...

            '
        - pattern-inside: '$FROM_DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$FROM_DICT = { ... }

            ...

            '
        - pattern-inside: '$FROM_DICT = dict(...)

            ...

            '
      - pattern-either:
        - pattern: $TO_DICT.update($FROM_DICT)
        - pattern: $TO_DICT | $FROM_DICT
        - pattern: $TO_DICT |= $FROM_DICT
    to: $TO_DICT
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$LIST = [ ... ]

            ...

            '
        - pattern-inside: '$LIST = list(...)

            ...

            '
      - pattern-either:
        - pattern: $LIST.append($FROM)
        - pattern: $LIST.extend($FROM)
        - pattern: $LIST.insert($INDEX, $FROM)
    to: $LIST
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern: $FROM.$LOG($SINK, ...)
        - pattern: $FROM.$LOG(..., msg=$SINK, ...)
        - pattern: $APP.logger.$LOG($SINK, ...)
      - metavariable-regex:
          metavariable: $LOG
          regex: ^(info|warning|error|critical|log|exception|handle)$
    to: $SINK
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$SET = { $ITEM, ... }

            ...

            '
        - pattern-inside: '$SET = set(...)

            ...

            '
        - pattern-inside: '$OTHERSET = { $ITEM, ... }

            ...

            '
        - pattern-inside: '$OTHERSET = set(...)

            ...

            '
      - pattern-either:
        - pattern: $SET.update(..., $FROM, ...)
        - pattern: $SET.intersection_update(..., $FROM, ...)
        - pattern: $SET.difference_update(..., $FROM, ...)
        - pattern: $SET.symmetric_difference_update(..., $FROM, ...)
        - pattern: $SET.add($FROM)
        - pattern: $SET |= $FROM
        - pattern: $SET &= $FROM
        - pattern: $SET -= $FROM
        - pattern: $SET ^= $FROM
    to: $SET
  - from: $FORM
    patterns:
    - pattern: $FORM.populate_obj($OBJ)
    to: $OBJ
  - from: $CLIENT
    label: HTTPX_ASYNC
    patterns:
    - patterns:
      - pattern-either:
        - pattern: $CLIENT.$FUNC(..., $URL, ...)
        - pattern: $CLIENT.$FUNC(..., url=$URL, ...)
    requires: HTTPX_ASYNC
    to: $URL
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: httpx.request($ARG_1, $SINK, ...)
      - pattern: httpx.request(..., url=$SINK, ...)
      - pattern: httpx.get($SINK, ...)
      - pattern: httpx.get(..., url=$SINK, ...)
      - pattern: httpx.options($SINK, ...)
      - pattern: httpx.options(..., url=$SINK, ...)
      - pattern: httpx.head($SINK, ...)
      - pattern: httpx.head(..., url=$SINK, ...)
      - pattern: httpx.post($SINK, ...)
      - pattern: httpx.post(..., url=$SINK, ...)
      - pattern: httpx.put($SINK, ...)
      - pattern: httpx.put(..., url=$SINK, ...)
      - pattern: httpx.patch($SINK, ...)
      - pattern: httpx.patch(..., url=$SINK, ...)
      - pattern: httpx.delete($SINK, ...)
      - pattern: httpx.delete(..., url=$SINK, ...)
      - pattern: httpx.stream($SINK, ...)
      - pattern: httpx.stream(..., url=$SINK, ...)
    - focus-metavariable: $SINK
    requires: __SOURCE__
  - patterns:
    - pattern-either:
      - pattern-inside: "class $CLS:\n  ...\n  $HTTPX: httpx.Client\n  ...\n"
      - pattern-inside: "class $CLS:\n  ...\n  $HTTPX: httpx.Client = ...\n  ...\n"
      - pattern-inside: "class $HTTPX(..., httpx.Client, ...):\n  ...\n...\n"
      - pattern-inside: "def $FUN(..., $HTTPX: httpx.Client, ...):\n  ...\n"
      - pattern-inside: '$HTTPX: httpx.Client

          ...

          '
      - pattern-inside: '$HTTPX: httpx.Client = ...

          ...

          '
      - pattern-inside: "if isinstance($HTTPX, httpx.Client):\n  ...\n"
      - pattern-inside: "if isinstance($HTTPX, (..., httpx.Client, ...)):\n  ...\n"
      - pattern-inside: "if type($HTTPX) == httpx.Client:\n  ...\n"
      - pattern-inside: '$HTTPX = httpx.Client(...)

          ...

          '
    - pattern-either:
      - pattern: $HTTPX.request($ARG_1, $SINK, ...)
      - pattern: $HTTPX.request(..., url=$SINK, ...)
      - pattern: $HTTPX.get($SINK, ...)
      - pattern: $HTTPX.get(..., url=$SINK, ...)
      - pattern: $HTTPX.options($SINK, ...)
      - pattern: $HTTPX.options(..., url=$SINK, ...)
      - pattern: $HTTPX.head($SINK, ...)
      - pattern: $HTTPX.head(..., url=$SINK, ...)
      - pattern: $HTTPX.post($SINK, ...)
      - pattern: $HTTPX.post(..., url=$SINK, ...)
      - pattern: $HTTPX.put($SINK, ...)
      - pattern: $HTTPX.put(..., url=$SINK, ...)
      - pattern: $HTTPX.patch($SINK, ...)
      - pattern: $HTTPX.patch(..., url=$SINK, ...)
      - pattern: $HTTPX.delete($SINK, ...)
      - pattern: $HTTPX.delete(..., url=$SINK, ...)
      - pattern: $HTTPX.stream($ARG_1, $SINK, ...)
      - pattern: $HTTPX.stream(..., url=$SINK, ...)
      - pattern: $HTTPX.build_request($ARG_1, $SINK, ...)
      - pattern: $HTTPX.build_request(..., url=$SINK, ...)
    - focus-metavariable: $SINK
    requires: __SOURCE__
  - patterns:
    - pattern-either:
      - pattern: $HTTPX.request($ARG_1, $SINK, ...)
      - pattern: $HTTPX.request(..., url=$SINK, ...)
      - pattern: $HTTPX.get($SINK, ...)
      - pattern: $HTTPX.get(..., url=$SINK, ...)
      - pattern: $HTTPX.options($SINK, ...)
      - pattern: $HTTPX.options(..., url=$SINK, ...)
      - pattern: $HTTPX.head($SINK, ...)
      - pattern: $HTTPX.head(..., url=$SINK, ...)
      - pattern: $HTTPX.post($SINK, ...)
      - pattern: $HTTPX.post(..., url=$SINK, ...)
      - pattern: $HTTPX.put($SINK, ...)
      - pattern: $HTTPX.put(..., url=$SINK, ...)
      - pattern: $HTTPX.patch($SINK, ...)
      - pattern: $HTTPX.patch(..., url=$SINK, ...)
      - pattern: $HTTPX.delete($SINK, ...)
      - pattern: $HTTPX.delete(..., url=$SINK, ...)
      - pattern: $HTTPX.stream($ARG_1, $SINK, ...)
      - pattern: $HTTPX.stream(..., url=$SINK, ...)
      - pattern: $HTTPX.build_request($ARG_1, $SINK, ...)
      - pattern: $HTTPX.build_request(..., url=$SINK, ...)
    - focus-metavariable: $SINK
    requires: __SOURCE__ and HTTPX_ASYNC
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: int(...)
      - pattern: bool(...)
      - pattern: float(...)
      - pattern: complex(...)
      - pattern: oct(...)
      - pattern: hex(...)
      - pattern: bin(...)
      - pattern: round(...)
      - pattern: id(...)
      - pattern: hash(...)
      - pattern: len(...)
      - pattern: type(...)
  - patterns:
    - pattern-either:
      - pattern-inside: '$DICT[$KEY]

          ...

          '
      - pattern-inside: '$DICT = { $KEY: $VALUE for ... in ...}

          ...

          '
      - pattern-inside: '$DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$DICT = { }

          ...

          '
      - pattern-inside: '$DICT = { $KEY: $VALUE, ... }

          ...

          '
      - pattern-inside: '$DICT = dict(...)

          ...

          '
    - pattern-either:
      - pattern: $DICT.clear()
      - pattern: $DICT.len()
  - patterns:
    - pattern-either:
      - pattern-inside: '$LIST = [ ... ]

          ...

          '
      - pattern-inside: '$LIST = list(...)

          ...

          '
    - pattern-either:
      - pattern: $LIST.clear()
      - pattern: $LIST.count(...)
      - pattern: $LIST.index(...)
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.len()
      - pattern: $SET.clear()
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = { $ITEM for ... in ...}

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
      - pattern-inside: '$SET = frozenset(...)

          ...

          '
      - pattern-inside: '$OTHERSET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$OTHERSET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.isdisjoint($OTHERSET)
      - pattern: $SET.difference($OTHERSET)
      - pattern: $SET.issubset($OTHERSET)
      - pattern: $SET < $OTHERSET
      - pattern: $SET <= $OTHERSET
      - pattern: $SET.issuperset($OTHERSET)
      - pattern: $SET > $OTHERSET
      - pattern: $SET >= $OTHERSET
  - patterns:
    - pattern-either:
      - pattern-inside: '$TUPLE = ( $ITEM, ... )

          ...

          '
      - pattern-inside: '$TUPLE = $ITEM, ...

          ...

          '
      - pattern-inside: '$TUPLE = tuple(...)

          ...

          '
    - pattern-either:
      - pattern: $TUPLE.len()
  - pattern: urllib.parse.urlencode(...)
  - pattern: urllib.parse.quote(...)
  - pattern: urllib.parse.quote_plus(...)
  - pattern: urllib.urlencode(...)
  - pattern: urllib.quote(...)
  - pattern: urllib.quote_plus(...)
  - pattern: django.urls.reverse(...)
  - pattern: django.urls.base.reverse(...)
