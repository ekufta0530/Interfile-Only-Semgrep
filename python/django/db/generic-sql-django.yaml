rules:
- id: generic-sql-django
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. The driver API has the ability to bind parameters to
    the query in a safe way. Make sure not to dynamically create SQL queries from
    user-influenced inputs. If you cannot avoid this, either escape the data properly
    or create an allowlist to check the value.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - db::sink::sql-or-nosql-query::aiomysql
    - db::sink::sql-or-nosql-query::aiopg
    - db::sink::sql-or-nosql-query::mysql-connector
    - db::sink::sql-or-nosql-query::mysqldb
    - db::sink::sql-or-nosql-query::pep249
    - db::sink::sql-or-nosql-query::psycopg2
    - db::sink::sql-or-nosql-query::pymssql
    - db::sink::sql-or-nosql-query::pymysql
    - db::sink::sql-or-nosql-query::pyodbc
    - web::source::cookie::django_rest_frameworkapi
    - web::source::form-data::django_rest_frameworkapi
    - web::source::header::django_rest_frameworkapi
    - web::source::http-body::django_rest_frameworkapi
    - web::source::http-params::django_rest_frameworkapi
    - web::source::url-path-params::django_rest_frameworkapi
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    release: alpha
    technology:
    - aiomysql
    - aiopg
    - db-api
    - django_rest_frameworkapi
    - mssql
    - mysql
    - mysql-connector
    - mysqldb
    - pep249
    - postgres
    - psycopg2
    - pymssql
    - pymysql
    - pyodbc
    - sql
    - web
  languages:
  - python
  mode: taint
  options:
    interfile: true
    symbolic_propagation: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - label: __SOURCE__
    patterns:
    - patterns:
      - pattern-either:
        - pattern: $DJANGO_REQUEST.query_params
        - pattern: $DJANGO_REQUEST.stream
        - pattern: $DJANGO_REQUEST.content_type
        - pattern: $DJANGO_REQUEST.data
        - pattern: $DJANGO_REQUEST.user_agent_string
        - pattern: $DJANGO_REQUEST.user_agent
        - pattern: $DJANGO_REQUEST.body
        - pattern: $DJANGO_REQUEST.headers
        - pattern: $DJANGO_REQUEST.path
        - pattern: $DJANGO_REQUEST.path_info
        - pattern: $DJANGO_REQUEST.META
        - pattern: $DJANGO_REQUEST.REQUEST
        - pattern: $DJANGO_REQUEST.GET
        - pattern: $DJANGO_REQUEST.POST
        - pattern: $DJANGO_REQUEST.FILES
        - pattern: $DJANGO_REQUEST.DATA
        - pattern: $DJANGO_REQUEST.QUERY_PARAMS
        - pattern: $DJANGO_REQUEST.COOKIES
        - pattern: $DJANGO_REQUEST.get_host()
        - pattern: $DJANGO_REQUEST.get_full_path(...)
        - pattern: $DJANGO_REQUEST.get_full_path_info(...)
        - pattern: $DJANGO_REQUEST.get_raw_uri(...)
        - pattern: $DJANGO_REQUEST.encoding(...)
        - pattern: $DJANGO_REQUEST.body(...)
        - pattern: $DJANGO_REQUEST.read(...)
        - pattern: $DJANGO_REQUEST.readline()
        - pattern: $DJANGO_REQUEST.readlines()
        - pattern: $DJANGO_REQUEST.get_signed_cookie(...)
    requires: DJANGO_REQUEST
  - label: DJANGO_REQUEST
    patterns:
    - patterns:
      - pattern-either:
        - pattern: "@rest_framework.decorators.api_view(...)\ndef $FUNC($DJANGO_REQUEST,\
            \ ...):\n  ...\n"
        - patterns:
          - pattern: "class $CLS($PARENT_CLASS):\n    ...\n    def $FUNC(self, $DJANGO_REQUEST,\
              \ ...):\n      ...\n"
          - metavariable-regex:
              metavariable: $PARENT_CLASS
              regex: ^rest_framework\.+
          - metavariable-regex:
              metavariable: $FUNC
              regex: get|post|put|patch|delete|head|options|dispatch|initial|throttled|retrieve|update|partial_update|destroy|list|create
      - focus-metavariable: $DJANGO_REQUEST
  pattern-propagators:
  - from: $DEFAULT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$DICT[$KEY]

            ...

            '
        - pattern-inside: '$DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$DICT = { ... }

            ...

            '
        - pattern-inside: '$DICT = dict(...)

            ...

            '
      - pattern-either:
        - pattern: $DICT.get($FIELD, $DEFAULT)
        - pattern: $DICT.setdefault($KEY, $DEFAULT)
    to: $DICT
  - from: $FROM_DICT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$TO_DICT[$KEY]

            ...

            '
        - pattern-inside: '$TO_DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$TO_DICT = { ... }

            ...

            '
        - pattern-inside: '$TO_DICT = dict(...)

            ...

            '
        - pattern-inside: '$FROM_DICT[$KEY]

            ...

            '
        - pattern-inside: '$FROM_DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$FROM_DICT = { ... }

            ...

            '
        - pattern-inside: '$FROM_DICT = dict(...)

            ...

            '
      - pattern-either:
        - pattern: $TO_DICT.update($FROM_DICT)
        - pattern: $TO_DICT | $FROM_DICT
        - pattern: $TO_DICT |= $FROM_DICT
    to: $TO_DICT
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$LIST = [ ... ]

            ...

            '
        - pattern-inside: '$LIST = list(...)

            ...

            '
      - pattern-either:
        - pattern: $LIST.append($FROM)
        - pattern: $LIST.extend($FROM)
        - pattern: $LIST.insert($INDEX, $FROM)
    to: $LIST
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern: $FROM.$LOG($SINK, ...)
        - pattern: $FROM.$LOG(..., msg=$SINK, ...)
        - pattern: $APP.logger.$LOG($SINK, ...)
      - metavariable-regex:
          metavariable: $LOG
          regex: ^(info|warning|error|critical|log|exception|handle)$
    to: $SINK
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$SET = { $ITEM, ... }

            ...

            '
        - pattern-inside: '$SET = set(...)

            ...

            '
        - pattern-inside: '$OTHERSET = { $ITEM, ... }

            ...

            '
        - pattern-inside: '$OTHERSET = set(...)

            ...

            '
      - pattern-either:
        - pattern: $SET.update(..., $FROM, ...)
        - pattern: $SET.intersection_update(..., $FROM, ...)
        - pattern: $SET.difference_update(..., $FROM, ...)
        - pattern: $SET.symmetric_difference_update(..., $FROM, ...)
        - pattern: $SET.add($FROM)
        - pattern: $SET |= $FROM
        - pattern: $SET &= $FROM
        - pattern: $SET -= $FROM
        - pattern: $SET ^= $FROM
    to: $SET
  - from: $FORM
    patterns:
    - pattern: $FORM.populate_obj($OBJ)
    to: $OBJ
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $CURSOR.copy_expert($SINK, ...)
      - pattern: $CURSOR.copy_expert(..., sql=$SINK, ...)
      - pattern: $CURSOR.execute($SINK, ...)
      - pattern: $CURSOR.execute(..., query=$SINK, ...)
      - pattern: $CURSOR.executemany($SINK, ...)
      - pattern: $CURSOR.executemany(..., query=$SINK, ...)
      - pattern: pyscopg2.extras.execute_batch($ARG_1, $SINK, ...)
      - pattern: pyscopg2.extras.execute_batch(..., sql=$SINK, ...)
      - pattern: pyscopg2.extras.execute_values($ARG_1, $SINK, ...)
      - pattern: pyscopg2.extras.execute_values(..., sql=$SINK, ...)
    - focus-metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern: aiomysql.Connect(..., init_command=$SINK, ...)
      - pattern: aiomysql.Connection(..., init_command=$SINK, ...)
      - pattern: aiomysql.connect(..., init_command=$SINK, ...)
      - pattern: $AIOMYSQL_CONNECTION.query($SINK, ...)
      - pattern: $AIOMYSQL_CONNECTION.query(..., sql=$SINK, ...)
      - pattern: $AIOMYSQL_CONNECTION.write_packet($SINK, ...)
      - pattern: $AIOMYSQL_CONNECTION.write_packet(..., payload=$SINK, ...)
      - pattern: $AIOMYSQL_CONNECTION._execute_command($SINK, ...)
      - pattern: $AIOMYSQL_CONNECTION._execute_command(..., command=$SINK, ...)
      - pattern: $AIOMYSQL_CONNECTION._execute_command($ARG_1, $SINK, ...)
      - pattern: $AIOMYSQL_CONNECTION._execute_command(..., sql=$SINK, ...)
      - pattern: $AIOMYSQL_CURSOR.mogrify($SINK, ...)
      - pattern: $AIOMYSQL_CURSOR.mogrify(..., query=$SINK, ...)
      - pattern: $AIOMYSQL_CURSOR.execute($SINK, ...)
      - pattern: $AIOMYSQL_CURSOR.execute(..., query=$SINK, ...)
      - pattern: $AIOMYSQL_CURSOR.executemany($SINK, ...)
      - pattern: $AIOMYSQL_CURSOR.executemany(..., query=$SINK, ...)
      - pattern: $AIOMYSQL_CURSOR.callproc($SINK, ...)
      - pattern: $AIOMYSQL_CURSOR.callproc(..., procname=$SINK, ...)
      - pattern: $AIOMYSQL_CURSOR._do_execute_many($SINK, ...)
      - pattern: $AIOMYSQL_CURSOR._do_execute_many(..., prefix=$SINK, ...)
      - pattern: $AIOMYSQL_CURSOR._do_execute_many($ARG_1, $ARG_2, $SINK, ...)
      - pattern: $AIOMYSQL_CURSOR._do_execute_many(..., suffix=$SINK, ...)
      - pattern: $AIOMYSQL_CURSOR._do_query($SINK, ...)
      - pattern: $AIOMYSQL_CURSOR._do_query(..., q=$SINK, ...)
      - pattern: $AIOMYSQL_CURSOR._query($SINK, ...)
      - pattern: $AIOMYSQL_CURSOR._query(..., q=$SINK, ...)
      - pattern: $AIOMYSQL_SA_CONNECTION.execute($SINK, ...)
      - pattern: $AIOMYSQL_SA_CONNECTION.execute(..., sql=$SINK, ...)
      - pattern: $AIOMYSQL_SA_CONNECTION._executemany($SINK, ...)
      - pattern: $AIOMYSQL_SA_CONNECTION._executemany(..., sql=$SINK, ...)
      - pattern: $AIOMYSQL_SA_CONNECTION._execute($SINK, ...)
      - pattern: $AIOMYSQL_SA_CONNECTION._execute(..., sql=$SINK, ...)
    - focus-metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern: aiopg.Connect(..., init_command=$SINK, ...)
      - pattern: aiopg.Connection(..., init_command=$SINK, ...)
      - pattern: aiopg.connect(..., init_command=$SINK, ...)
      - pattern: $AIOPG_CONNECTION.execute($SINK, ...)
      - pattern: $AIOPG_CONNECTION.execute(..., operation=$SINK, ...)
      - pattern: $AIOPG_CONNECTION.callproc($SINK, ...)
      - pattern: $AIOPG_CONNECTION.callproc(..., procname=$SINK, ...)
      - pattern: $AIOPG_SA_CONNECTION.execute($SINK, ...)
      - pattern: $AIOPG_SA_CONNECTION.execute(..., query=$SINK, ...)
      - pattern: $AIOPG_SA_CONNECTION._execute($SINK, ...)
      - pattern: $AIOPG_SA_CONNECTION._execute(..., query=$SINK, ...)
      - pattern: $AIOPG_SA_CONNECTION.scalar($SINK, ...)
      - pattern: $AIOPG_SA_CONNECTION.scalar(..., query=$SINK, ...)
    - focus-metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern: $INST.execute($SINK, ...)
      - pattern: $INST.executemany($SINK, ...)
      - pattern: $INST.callproc($SINK, ...)
    - focus-metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern: $PYMYSQL_CONN.cmd_query($SINK, ...)
      - pattern: $PYMYSQL_CONN.cmd_query(..., query=$SINK, ...)
      - pattern: $PYMYSQL_CONN.cmd_query_iter($SINK, ...)
      - pattern: $PYMYSQL_CONN.cmd_query_iter(..., statements=$SINK, ...)
      - pattern: $PYMYSQL_CONN.info_query($SINK, ...)
      - pattern: $PYMYSQL_CONN.info_query(..., query=$SINK, ...)
      - pattern: $PYMYSQL_CONN.cmd_stmt_prepare($SINK, ...)
      - pattern: $PYMYSQL_CONN.cmd_stmt_prepare(..., statement=$SINK, ...)
      - pattern: $PYMYSQL_CONN.info_query($SINK, ...)
      - pattern: $PYMYSQL_CONN.info_query(..., query=$SINK, ...)
    - focus-metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern: MySQLdb._mysql.connect(..., init_command=$SINK, ...)
      - pattern: MySQLdb._mysql.connection(..., init_command=$SINK, ...)
      - pattern: $CONNECTION.query($SINK, ...)
      - pattern: $CONNECTION.query(..., s=$SINK, ...)
      - pattern: $CONNECTION.send_query($SINK, ...)
      - pattern: $CONNECTION.send_query(..., s=$SINK, ...)
      - pattern: MySQLdb.Connect(..., init_command=$SINK, ...)
      - pattern: MySQLdb.Connection(..., init_command=$SINK, ...)
      - pattern: MySQLdb.connect(..., init_command=$SINK, ...)
      - pattern: $MYSQLDB_CURSOR.execute($SINK, ...)
      - pattern: $MYSQLDB_CURSOR.execute(..., query=$SINK, ...)
      - pattern: $MYSQLDB_CURSOR.executemany($SINK, ...)
      - pattern: $MYSQLDB_CURSOR.executemany(..., query=$SINK, ...)
      - pattern: $MYSQLDB_CURSOR.callproc($SINK, ...)
      - pattern: $MYSQLDB_CURSOR.callproc(..., procname=$SINK, ...)
      - pattern: $MYSQLDB_CURSOR._do_execute_many($SINK, ...)
      - pattern: $MYSQLDB_CURSOR._do_execute_many(..., prefix=$SINK, ...)
      - pattern: $MYSQLDB_CURSOR._do_execute_many($ARG_1, $ARG_2, $SINK, ...)
      - pattern: $MYSQLDB_CURSOR._do_execute_many(..., suffix=$SINK, ...)
      - pattern: $MYSQLDB_CURSOR._do_query($SINK, ...)
      - pattern: $MYSQLDB_CURSOR._do_query(..., q=$SINK, ...)
      - pattern: $MYSQLDB_CURSOR._query($SINK, ...)
      - pattern: $MYSQLDB_CURSOR._query(..., q=$SINK, ...)
    - focus-metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern: $MSSQL_CONNECTION.execute_query($SINK, ...)
      - pattern: $MSSQL_CONNECTION.execute_query(..., query_string=$SINK, ...)
      - pattern: $MSSQL_CONNECTION.execute_non_query($SINK, ...)
      - pattern: $MSSQL_CONNECTION.execute_non_query(..., query_string=$SINK, ...)
      - pattern: $MSSQL_CONNECTION.execute_row($SINK, ...)
      - pattern: $MSSQL_CONNECTION.execute_row(..., query_string=$SINK, ...)
      - pattern: $MSSQL_CONNECTION.execute_scalar($SINK, ...)
      - pattern: $MSSQL_CONNECTION.execute_scalar(..., query_string=$SINK, ...)
      - pattern: $MSSQL_CONNECTION.format_and_run_query($SINK, ...)
      - pattern: $MSSQL_CONNECTION.format_and_run_query(..., query_string=$SINK, ...)
      - pattern: $MSSQL_CONNECTION.executemany($SINK, ...)
      - pattern: $MSSQL_CONNECTION.executemany(..., query_string=$SINK, ...)
      - pattern: $MSSQL_CONNECTION.init_procedure($SINK, ...)
      - pattern: $MSSQL_CONNECTION.init_procedure(..., procname=$SINK, ...)
      - pattern: $PYMSSQL_CURSOR.callproc($SINK, ...)
      - pattern: $PYMSSQL_CURSOR.callproc(..., procname=$SINK, ...)
      - pattern: $PYMSSQL_CURSOR.execute($SINK, ...)
      - pattern: $PYMSSQL_CURSOR.execute(..., operation=$SINK, ...)
      - pattern: $PYMSSQL_CURSOR.executemany($SINK, ...)
      - pattern: $PYMSSQL_CURSOR.executemany(..., operation=$SINK, ...)
    - focus-metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern: PyMySQL.Connect(..., init_command=$SINK, ...)
      - pattern: PyMySQL.Connection(..., init_command=$SINK, ...)
      - pattern: PyMySQL.connect(..., init_command=$SINK, ...)
      - pattern: $PYMYSQL_CURSOR.execute($SINK, ...)
      - pattern: $PYMYSQL_CURSOR.execute(..., query=$SINK, ...)
      - pattern: $PYMYSQL_CURSOR.executemany($SINK, ...)
      - pattern: $PYMYSQL_CURSOR.executemany(..., query=$SINK, ...)
      - pattern: $PYMYSQL_CURSOR.callproc($SINK, ...)
      - pattern: $PYMYSQL_CURSOR.callproc(..., procname=$SINK, ...)
      - pattern: $PYMYSQL_CURSOR._do_execute_many($SINK, ...)
      - pattern: $PYMYSQL_CURSOR._do_execute_many(..., prefix=$SINK, ...)
      - pattern: $PYMYSQL_CURSOR._do_execute_many($ARG_1, $ARG_2, $SINK, ...)
      - pattern: $PYMYSQL_CURSOR._do_execute_many(..., suffix=$SINK, ...)
      - pattern: $PYMYSQL_CURSOR._do_query($SINK, ...)
      - pattern: $PYMYSQL_CURSOR._do_query(..., q=$SINK, ...)
      - pattern: $PYMYSQL_CURSOR._query($SINK, ...)
      - pattern: $PYMYSQL_CURSOR._query(..., q=$SINK, ...)
    - focus-metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern: $PYODBC_CURSOR.execute(..., query=$SINK, ...)
      - pattern: $PYODBC_CURSOR.executemany(..., query=$SINK, ...)
      - pattern: $PYODBC_CURSOR.callproc(..., procname=$SINK, ...)
    - focus-metavariable: $SINK
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: int(...)
      - pattern: bool(...)
      - pattern: float(...)
      - pattern: complex(...)
      - pattern: oct(...)
      - pattern: hex(...)
      - pattern: bin(...)
      - pattern: round(...)
      - pattern: id(...)
      - pattern: hash(...)
      - pattern: len(...)
      - pattern: type(...)
  - patterns:
    - pattern-either:
      - pattern-inside: '$DICT[$KEY]

          ...

          '
      - pattern-inside: '$DICT = { $KEY: $VALUE for ... in ...}

          ...

          '
      - pattern-inside: '$DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$DICT = { }

          ...

          '
      - pattern-inside: '$DICT = { $KEY: $VALUE, ... }

          ...

          '
      - pattern-inside: '$DICT = dict(...)

          ...

          '
    - pattern-either:
      - pattern: $DICT.clear()
      - pattern: $DICT.len()
  - patterns:
    - pattern-either:
      - pattern-inside: '$LIST = [ ... ]

          ...

          '
      - pattern-inside: '$LIST = list(...)

          ...

          '
    - pattern-either:
      - pattern: $LIST.clear()
      - pattern: $LIST.count(...)
      - pattern: $LIST.index(...)
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.len()
      - pattern: $SET.clear()
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = { $ITEM for ... in ...}

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
      - pattern-inside: '$SET = frozenset(...)

          ...

          '
      - pattern-inside: '$OTHERSET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$OTHERSET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.isdisjoint($OTHERSET)
      - pattern: $SET.difference($OTHERSET)
      - pattern: $SET.issubset($OTHERSET)
      - pattern: $SET < $OTHERSET
      - pattern: $SET <= $OTHERSET
      - pattern: $SET.issuperset($OTHERSET)
      - pattern: $SET > $OTHERSET
      - pattern: $SET >= $OTHERSET
  - patterns:
    - pattern-either:
      - pattern-inside: '$TUPLE = ( $ITEM, ... )

          ...

          '
      - pattern-inside: '$TUPLE = $ITEM, ...

          ...

          '
      - pattern-inside: '$TUPLE = tuple(...)

          ...

          '
    - pattern-either:
      - pattern: $TUPLE.len()
  - pattern-either:
    - patterns:
      - pattern: sqlalchemy.select(...).$FUNC(...)
      - pattern-not: sqlalchemy.select(...).from_statement(...)
      - pattern-not: sqlalchemy.select(...).prefix_with(...)
      - pattern-not: sqlalchemy.select(...).suffix_with(...)
    - pattern: sqlalchemy.select(...)
    - pattern: sqlalchemy.table(...)
    - pattern: sqlalchemy.table(...).$FUNC(...)
    - pattern: sqlalchemy.bindparam(...)
    - pattern: sqlalchemy.bindparams(...)
    - pattern: $STMT.bindparam(...)
    - pattern: $STMT.bindparams(...)
    - patterns:
      - pattern: $COLUMN.$FUNC(...)
      - pattern-not: $COLUMN.$FUNC(..., autoescape=False, ...)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(contains|endswith|like|startswith|icontains|iendswith|ilike|istartswith|not_ilike|not_like|notilike|notlike|regexp_match|regexp_replace)$
