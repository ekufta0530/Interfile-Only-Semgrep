rules:
- id: tainted-regex-stdlib-fastapi
  message: The regular expression identified appears vulnerable to Regular Expression
    Denial of Service (ReDoS) through catastrophic backtracking. If the input is attacker
    controllable, this vulnerability can lead to systems being non-responsive or may
    crash due to ReDoS. Where possible, re-write the regex so as not to leverage backtracking
    or use a library that offers default protection against ReDoS.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-1333: Inefficient Regular Expression Complexity'
    functional-categories:
    - regex::sink::regex::libxml2
    - regex::sink::regex::re
    - regex::sink::regex::regex
    - regex::sink::regex::stdlib
    - regex::sink::regex::stdlib2
    - regex::sink::regex::stdlib3
    - web::source::cookie::fastapi
    - web::source::form-data::fastapi
    - web::source::header::fastapi
    - web::source::http-body::fastapi
    - web::source::http-params::fastapi
    - web::source::url-path-params::fastapi
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS
    - https://www.regular-expressions.info/catastrophic.html
    technology:
    - fastapi
    - libxml2
    - re
    - regex
    - stdlib
    - stdlib2
    - stdlib3
    - web
  languages:
  - python
  mode: taint
  options:
    interfile: true
    symbolic_propagation: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - patterns:
    - pattern: "@$APP.$ROUTE(\"$ROUTESTRING\", ...)\nasync def $FUNC(..., $PARAM,\
        \ ...):\n  ...\n"
    - metavariable-comparison:
        comparison: str($PARAM) not in $ROUTESTRING
    - metavariable-regex:
        metavariable: $ROUTE
        regex: ^(websocket|get|put|post|delete|options|head|patch|trace)$
    - metavariable-type:
        metavariable: $PARAM
        types:
        - str | None
        - str
        - Optional[str]
        - typing.Union[str, None]
        - list[str] | None
        - list[str]
        - typing.List[str] | None
        - typing.List[str]
        - typing.Optional[typing.List[str]]
        - typing.Union[list[str], None]
        - fastapi.Query(...)
        - typing.Annotated[...,  fastapi.Query(...)]
        - fastapi.Path(...)
        - typing.Annotated[...,  fastapi.Path(...)]
        - fastapi.Body(...)
        - typing.Annotated[...,  fastapi.Body(...)]
        - fastapi.Cookie(...)
        - typing.Annotated[...,  fastapi.Cookie(...)]
        - fastapi.Header(...)
        - typing.Annotated[...,  fastapi.Header(...)]
        - fastapi.Form(...)
        - typing.Annotated[...,  fastapi.Form(...)]
        - fastapi.File(...)
        - fastapi.UploadFile
        - typing.List[fastapi.UploadFile]
        - list[fastapi.UploadFile]
        - typing.Annotated[...,  fastapi.File(...)]
        - pydantic.BaseModel
        - typing.Annotated[..., fastapi.Cookie()]
        - fastapi.Cookie(...)
        - typing.Annotated[..., fastapi.Header()]
        - fastapi.Header(...)
    - focus-metavariable: $PARAM
  - label: FASTAPI_REQUEST
    patterns:
    - patterns:
      - pattern-either:
        - pattern: "@$APP.middleware(...)\nasync def $FUNC($FASTAPI_REQUEST, ...):\n\
            \  ...\n"
        - patterns:
          - pattern: "def $FUNC(..., $FASTAPI_REQUEST, ...):\n  ...\n"
          - metavariable-type:
              metavariable: $FASTAPI_REQUEST
              types:
              - fastapi.Request
              - fastapi.requests.Request
              - starlette.requests.Request
      - focus-metavariable: $FASTAPI_REQUEST
  - label: __SOURCE__
    patterns:
    - patterns:
      - pattern-either:
        - pattern: $FASTAPI_REQUEST.url.path
        - pattern: $FASTAPI_REQUEST.base_url
        - pattern: $FASTAPI_REQUEST.headers
        - pattern: $FASTAPI_REQUEST.query_params
        - pattern: $FASTAPI_REQUEST.cookies
        - pattern: $FASTAPI_REQUEST.stream()
        - pattern: $FASTAPI_REQUEST.read(...)
        - pattern: $FASTAPI_REQUEST.form(...)
        - pattern: $FASTAPI_REQUEST._get_form(...)
        - pattern: $FASTAPI_REQUEST.body()
        - pattern: $FASTAPI_REQUEST.json()
    requires: FASTAPI_REQUEST
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: "@$APP.$ROUTE(\"$ROUTESTRING\")\nasync def $FUNC(..., $PARAM, ...):\n\
            \  ...\n"
        - metavariable-comparison:
            comparison: str($PARAM) in $ROUTESTRING
        - metavariable-regex:
            metavariable: $ROUTE
            regex: ^(websocket|get|put|post|delete|options|head|patch|trace)$
        - metavariable-type:
            metavariable: $PARAM
            types:
            - str | None
            - str
            - Optional[str]
            - Union[str, None]
            - list[str] | None
            - list[str]
            - Optional[List[str]]
            - Union[list[str], None]
        - focus-metavariable: $PARAM
  - label: FASTAPI_REQUEST
    patterns:
    - patterns:
      - pattern-either:
        - pattern: "@$APP.middleware(...)\nasync def $FUNC($FASTAPI_REQUEST, ...):\n\
            \  ...\n"
        - patterns:
          - pattern: "def $FUNC(..., $FASTAPI_REQUEST, ...):\n  ...\n"
          - metavariable-type:
              metavariable: $FASTAPI_REQUEST
              types:
              - fastapi.Request
              - fastapi.requests.Request
              - starlette.requests.Request
      - focus-metavariable: $FASTAPI_REQUEST
  - label: __SOURCE__
    patterns:
    - patterns:
      - pattern-either:
        - pattern: $FASTAPI_REQUEST.path_params
    requires: FASTAPI_REQUEST
  - label: REGEX_PATTERN
    patterns:
    - pattern-either:
      - pattern: regex._compile(...)
      - pattern: regex.compile(...)
      - pattern: re.compile(...)
      - pattern: re.Pattern(...)
      - pattern: regex.Pattern(...)
      - pattern: regex.finditer(...)
      - pattern: regex.splititer(...)
    requires: __SOURCE__
  pattern-propagators:
  - from: $DEFAULT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$DICT[$KEY]

            ...

            '
        - pattern-inside: '$DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$DICT = { ... }

            ...

            '
        - pattern-inside: '$DICT = dict(...)

            ...

            '
      - pattern-either:
        - pattern: $DICT.get($FIELD, $DEFAULT)
        - pattern: $DICT.setdefault($KEY, $DEFAULT)
    to: $DICT
  - from: $FROM_DICT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$TO_DICT[$KEY]

            ...

            '
        - pattern-inside: '$TO_DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$TO_DICT = { ... }

            ...

            '
        - pattern-inside: '$TO_DICT = dict(...)

            ...

            '
        - pattern-inside: '$FROM_DICT[$KEY]

            ...

            '
        - pattern-inside: '$FROM_DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$FROM_DICT = { ... }

            ...

            '
        - pattern-inside: '$FROM_DICT = dict(...)

            ...

            '
      - pattern-either:
        - pattern: $TO_DICT.update($FROM_DICT)
        - pattern: $TO_DICT | $FROM_DICT
        - pattern: $TO_DICT |= $FROM_DICT
    to: $TO_DICT
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$LIST = [ ... ]

            ...

            '
        - pattern-inside: '$LIST = list(...)

            ...

            '
      - pattern-either:
        - pattern: $LIST.append($FROM)
        - pattern: $LIST.extend($FROM)
        - pattern: $LIST.insert($INDEX, $FROM)
    to: $LIST
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern: $FROM.$LOG($SINK, ...)
        - pattern: $FROM.$LOG(..., msg=$SINK, ...)
        - pattern: $APP.logger.$LOG($SINK, ...)
      - metavariable-regex:
          metavariable: $LOG
          regex: ^(info|warning|error|critical|log|exception|handle)$
    to: $SINK
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$SET = { $ITEM, ... }

            ...

            '
        - pattern-inside: '$SET = set(...)

            ...

            '
        - pattern-inside: '$OTHERSET = { $ITEM, ... }

            ...

            '
        - pattern-inside: '$OTHERSET = set(...)

            ...

            '
      - pattern-either:
        - pattern: $SET.update(..., $FROM, ...)
        - pattern: $SET.intersection_update(..., $FROM, ...)
        - pattern: $SET.difference_update(..., $FROM, ...)
        - pattern: $SET.symmetric_difference_update(..., $FROM, ...)
        - pattern: $SET.add($FROM)
        - pattern: $SET |= $FROM
        - pattern: $SET &= $FROM
        - pattern: $SET -= $FROM
        - pattern: $SET ^= $FROM
    to: $SET
  - from: $FORM
    patterns:
    - pattern: $FORM.populate_obj($OBJ)
    to: $OBJ
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern: re.match($PATTERN, ...)
        - pattern: re.search($PATTERN, ...)
        - pattern: re.sub($PATTERN, ...)
        - pattern: re.subn($PATTERN, ...)
        - pattern: re.split($PATTERN, ...)
        - pattern: re.findall($PATTERN, ...)
        - pattern: re.template($PATTERN, ...)
      - pattern-either:
        - pattern: regex.match($PATTERN, ...)
        - pattern: regex.search($PATTERN, ...)
        - pattern: regex.sub($PATTERN, ...)
        - pattern: regex.subn($PATTERN, ...)
        - pattern: regex.subf($PATTERN, ...)
        - pattern: regex.subfn($PATTERN, ...)
        - pattern: regex.split($PATTERN, ...)
        - pattern: regex.findall($PATTERN, ...)
        - pattern: regex.template($PATTERN, ...)
      - pattern-either:
        - pattern: re.match(..., pattern=$PATTERN, ...)
        - pattern: re.search(..., pattern=$PATTERN, ...)
        - pattern: re.sub(..., pattern=$PATTERN, ...)
        - pattern: re.subn(..., pattern=$PATTERN, ...)
        - pattern: re.split(..., pattern=$PATTERN, ...)
        - pattern: re.findall(..., pattern=$PATTERN, ...)
        - pattern: re.template(..., pattern=$PATTERN, ...)
      - pattern-either:
        - pattern: regex.match(..., pattern=$PATTERN, ...)
        - pattern: regex.search(..., pattern=$PATTERN, ...)
        - pattern: regex.sub(..., pattern=$PATTERN, ...)
        - pattern: regex.subn(..., pattern=$PATTERN, ...)
        - pattern: regex.subf(..., pattern=$PATTERN, ...)
        - pattern: regex.subfn(..., pattern=$PATTERN, ...)
        - pattern: regex.split(..., pattern=$PATTERN, ...)
        - pattern: regex.findall(..., pattern=$PATTERN, ...)
        - pattern: regex.template(..., pattern=$PATTERN, ...)
    - focus-metavariable: $PATTERN
    requires: __SOURCE__
  - pattern-either:
    - pattern: $PATTERN.search(...)
    - pattern: $PATTERN.match(...)
    - pattern: $PATTERN.scan(...)
    - pattern: $PATTERN.findall(...)
    - pattern: $PATTERN.sub(...)
    - pattern: $PATTERN.subf(...)
    - pattern: $PATTERN.subn(...)
    - pattern: $PATTERN.subfn(...)
    - pattern: $PATTERN.split(...)
    requires: __SOURCE__ and REGEX_PATTERN
  - pattern: libxml2.regexpCompile(...)
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: int(...)
      - pattern: bool(...)
      - pattern: float(...)
      - pattern: complex(...)
      - pattern: oct(...)
      - pattern: hex(...)
      - pattern: bin(...)
      - pattern: round(...)
      - pattern: id(...)
      - pattern: hash(...)
      - pattern: len(...)
      - pattern: type(...)
  - patterns:
    - pattern-either:
      - pattern-inside: '$DICT[$KEY]

          ...

          '
      - pattern-inside: '$DICT = { $KEY: $VALUE for ... in ...}

          ...

          '
      - pattern-inside: '$DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$DICT = { }

          ...

          '
      - pattern-inside: '$DICT = { $KEY: $VALUE, ... }

          ...

          '
      - pattern-inside: '$DICT = dict(...)

          ...

          '
    - pattern-either:
      - pattern: $DICT.clear()
      - pattern: $DICT.len()
  - patterns:
    - pattern-either:
      - pattern-inside: '$LIST = [ ... ]

          ...

          '
      - pattern-inside: '$LIST = list(...)

          ...

          '
    - pattern-either:
      - pattern: $LIST.clear()
      - pattern: $LIST.count(...)
      - pattern: $LIST.index(...)
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.len()
      - pattern: $SET.clear()
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = { $ITEM for ... in ...}

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
      - pattern-inside: '$SET = frozenset(...)

          ...

          '
      - pattern-inside: '$OTHERSET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$OTHERSET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.isdisjoint($OTHERSET)
      - pattern: $SET.difference($OTHERSET)
      - pattern: $SET.issubset($OTHERSET)
      - pattern: $SET < $OTHERSET
      - pattern: $SET <= $OTHERSET
      - pattern: $SET.issuperset($OTHERSET)
      - pattern: $SET > $OTHERSET
      - pattern: $SET >= $OTHERSET
  - patterns:
    - pattern-either:
      - pattern-inside: '$TUPLE = ( $ITEM, ... )

          ...

          '
      - pattern-inside: '$TUPLE = $ITEM, ...

          ...

          '
      - pattern-inside: '$TUPLE = tuple(...)

          ...

          '
    - pattern-either:
      - pattern: $TUPLE.len()
