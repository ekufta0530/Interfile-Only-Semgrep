rules:
- id: tainted-fastapi-http-request-paramiko
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - net::sink::http-request::paramiko
    - web::source::cookie::fastapi
    - web::source::form-data::fastapi
    - web::source::header::fastapi
    - web::source::http-body::fastapi
    - web::source::http-params::fastapi
    - web::source::url-path-params::fastapi
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    technology:
    - fastapi
    - paramiko
    - web
  languages:
  - python
  mode: taint
  options:
    interfile: true
    symbolic_propagation: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - patterns:
    - pattern: "@$APP.$ROUTE(\"$ROUTESTRING\", ...)\nasync def $FUNC(..., $PARAM,\
        \ ...):\n  ...\n"
    - metavariable-comparison:
        comparison: str($PARAM) not in $ROUTESTRING
    - metavariable-regex:
        metavariable: $ROUTE
        regex: ^(websocket|get|put|post|delete|options|head|patch|trace)$
    - metavariable-type:
        metavariable: $PARAM
        types:
        - str | None
        - str
        - Optional[str]
        - typing.Union[str, None]
        - list[str] | None
        - list[str]
        - typing.List[str] | None
        - typing.List[str]
        - typing.Optional[typing.List[str]]
        - typing.Union[list[str], None]
        - fastapi.Query(...)
        - typing.Annotated[...,  fastapi.Query(...)]
        - fastapi.Path(...)
        - typing.Annotated[...,  fastapi.Path(...)]
        - fastapi.Body(...)
        - typing.Annotated[...,  fastapi.Body(...)]
        - fastapi.Cookie(...)
        - typing.Annotated[...,  fastapi.Cookie(...)]
        - fastapi.Header(...)
        - typing.Annotated[...,  fastapi.Header(...)]
        - fastapi.Form(...)
        - typing.Annotated[...,  fastapi.Form(...)]
        - fastapi.File(...)
        - fastapi.UploadFile
        - typing.List[fastapi.UploadFile]
        - list[fastapi.UploadFile]
        - typing.Annotated[...,  fastapi.File(...)]
        - pydantic.BaseModel
        - typing.Annotated[..., fastapi.Cookie()]
        - fastapi.Cookie(...)
        - typing.Annotated[..., fastapi.Header()]
        - fastapi.Header(...)
    - focus-metavariable: $PARAM
  - label: FASTAPI_REQUEST
    patterns:
    - patterns:
      - pattern-either:
        - pattern: "@$APP.middleware(...)\nasync def $FUNC($FASTAPI_REQUEST, ...):\n\
            \  ...\n"
        - patterns:
          - pattern: "def $FUNC(..., $FASTAPI_REQUEST, ...):\n  ...\n"
          - metavariable-type:
              metavariable: $FASTAPI_REQUEST
              types:
              - fastapi.Request
              - fastapi.requests.Request
              - starlette.requests.Request
      - focus-metavariable: $FASTAPI_REQUEST
  - label: __SOURCE__
    patterns:
    - patterns:
      - pattern-either:
        - pattern: $FASTAPI_REQUEST.url.path
        - pattern: $FASTAPI_REQUEST.base_url
        - pattern: $FASTAPI_REQUEST.headers
        - pattern: $FASTAPI_REQUEST.query_params
        - pattern: $FASTAPI_REQUEST.cookies
        - pattern: $FASTAPI_REQUEST.stream()
        - pattern: $FASTAPI_REQUEST.read(...)
        - pattern: $FASTAPI_REQUEST.form(...)
        - pattern: $FASTAPI_REQUEST._get_form(...)
        - pattern: $FASTAPI_REQUEST.body()
        - pattern: $FASTAPI_REQUEST.json()
    requires: FASTAPI_REQUEST
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: "@$APP.$ROUTE(\"$ROUTESTRING\")\nasync def $FUNC(..., $PARAM, ...):\n\
            \  ...\n"
        - metavariable-comparison:
            comparison: str($PARAM) in $ROUTESTRING
        - metavariable-regex:
            metavariable: $ROUTE
            regex: ^(websocket|get|put|post|delete|options|head|patch|trace)$
        - metavariable-type:
            metavariable: $PARAM
            types:
            - str | None
            - str
            - Optional[str]
            - Union[str, None]
            - list[str] | None
            - list[str]
            - Optional[List[str]]
            - Union[list[str], None]
        - focus-metavariable: $PARAM
  - label: FASTAPI_REQUEST
    patterns:
    - patterns:
      - pattern-either:
        - pattern: "@$APP.middleware(...)\nasync def $FUNC($FASTAPI_REQUEST, ...):\n\
            \  ...\n"
        - patterns:
          - pattern: "def $FUNC(..., $FASTAPI_REQUEST, ...):\n  ...\n"
          - metavariable-type:
              metavariable: $FASTAPI_REQUEST
              types:
              - fastapi.Request
              - fastapi.requests.Request
              - starlette.requests.Request
      - focus-metavariable: $FASTAPI_REQUEST
  - label: __SOURCE__
    patterns:
    - patterns:
      - pattern-either:
        - pattern: $FASTAPI_REQUEST.path_params
    requires: FASTAPI_REQUEST
  pattern-propagators:
  - from: $DEFAULT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$DICT[$KEY]

            ...

            '
        - pattern-inside: '$DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$DICT = { ... }

            ...

            '
        - pattern-inside: '$DICT = dict(...)

            ...

            '
      - pattern-either:
        - pattern: $DICT.get($FIELD, $DEFAULT)
        - pattern: $DICT.setdefault($KEY, $DEFAULT)
    to: $DICT
  - from: $FROM_DICT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$TO_DICT[$KEY]

            ...

            '
        - pattern-inside: '$TO_DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$TO_DICT = { ... }

            ...

            '
        - pattern-inside: '$TO_DICT = dict(...)

            ...

            '
        - pattern-inside: '$FROM_DICT[$KEY]

            ...

            '
        - pattern-inside: '$FROM_DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$FROM_DICT = { ... }

            ...

            '
        - pattern-inside: '$FROM_DICT = dict(...)

            ...

            '
      - pattern-either:
        - pattern: $TO_DICT.update($FROM_DICT)
        - pattern: $TO_DICT | $FROM_DICT
        - pattern: $TO_DICT |= $FROM_DICT
    to: $TO_DICT
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$LIST = [ ... ]

            ...

            '
        - pattern-inside: '$LIST = list(...)

            ...

            '
      - pattern-either:
        - pattern: $LIST.append($FROM)
        - pattern: $LIST.extend($FROM)
        - pattern: $LIST.insert($INDEX, $FROM)
    to: $LIST
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern: $FROM.$LOG($SINK, ...)
        - pattern: $FROM.$LOG(..., msg=$SINK, ...)
        - pattern: $APP.logger.$LOG($SINK, ...)
      - metavariable-regex:
          metavariable: $LOG
          regex: ^(info|warning|error|critical|log|exception|handle)$
    to: $SINK
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$SET = { $ITEM, ... }

            ...

            '
        - pattern-inside: '$SET = set(...)

            ...

            '
        - pattern-inside: '$OTHERSET = { $ITEM, ... }

            ...

            '
        - pattern-inside: '$OTHERSET = set(...)

            ...

            '
      - pattern-either:
        - pattern: $SET.update(..., $FROM, ...)
        - pattern: $SET.intersection_update(..., $FROM, ...)
        - pattern: $SET.difference_update(..., $FROM, ...)
        - pattern: $SET.symmetric_difference_update(..., $FROM, ...)
        - pattern: $SET.add($FROM)
        - pattern: $SET |= $FROM
        - pattern: $SET &= $FROM
        - pattern: $SET -= $FROM
        - pattern: $SET ^= $FROM
    to: $SET
  - from: $FORM
    patterns:
    - pattern: $FORM.populate_obj($OBJ)
    to: $OBJ
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: "class $CLS:\n  ...\n  $CLIENT: paramiko.SSHClient\n  ...\n"
      - pattern-inside: "class $CLS:\n  ...\n  $CLIENT: paramiko.SSHClient = ...\n\
          \  ...\n"
      - pattern-inside: "class $CLIENT(..., paramiko.SSHClient, ...):\n  ...\n...\n"
      - pattern-inside: "def $FUN(..., $CLIENT: paramiko.SSHClient, ...):\n  ...\n"
      - pattern-inside: '$CLIENT: paramiko.SSHClient

          ...

          '
      - pattern-inside: '$CLIENT: paramiko.SSHClient = ...

          ...

          '
      - pattern-inside: "if isinstance($CLIENT, paramiko.SSHClient):\n  ...\n"
      - pattern-inside: "if isinstance($CLIENT, (..., paramiko.SSHClient, ...)):\n\
          \  ...\n"
      - pattern-inside: "if type($CLIENT) == paramiko.SSHClient:\n  ...\n"
      - pattern-inside: '$CLIENT = paramiko.SSHClient(...)

          ...

          '
    - pattern-either:
      - pattern: $CLIENT.connect($SINK, ...)
      - pattern: $CLIENT.connect(..., hostname=$SINK, ...)
    - focus-metavariable: $SINK
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: int(...)
      - pattern: bool(...)
      - pattern: float(...)
      - pattern: complex(...)
      - pattern: oct(...)
      - pattern: hex(...)
      - pattern: bin(...)
      - pattern: round(...)
      - pattern: id(...)
      - pattern: hash(...)
      - pattern: len(...)
      - pattern: type(...)
  - patterns:
    - pattern-either:
      - pattern-inside: '$DICT[$KEY]

          ...

          '
      - pattern-inside: '$DICT = { $KEY: $VALUE for ... in ...}

          ...

          '
      - pattern-inside: '$DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$DICT = { }

          ...

          '
      - pattern-inside: '$DICT = { $KEY: $VALUE, ... }

          ...

          '
      - pattern-inside: '$DICT = dict(...)

          ...

          '
    - pattern-either:
      - pattern: $DICT.clear()
      - pattern: $DICT.len()
  - patterns:
    - pattern-either:
      - pattern-inside: '$LIST = [ ... ]

          ...

          '
      - pattern-inside: '$LIST = list(...)

          ...

          '
    - pattern-either:
      - pattern: $LIST.clear()
      - pattern: $LIST.count(...)
      - pattern: $LIST.index(...)
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.len()
      - pattern: $SET.clear()
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = { $ITEM for ... in ...}

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
      - pattern-inside: '$SET = frozenset(...)

          ...

          '
      - pattern-inside: '$OTHERSET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$OTHERSET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.isdisjoint($OTHERSET)
      - pattern: $SET.difference($OTHERSET)
      - pattern: $SET.issubset($OTHERSET)
      - pattern: $SET < $OTHERSET
      - pattern: $SET <= $OTHERSET
      - pattern: $SET.issuperset($OTHERSET)
      - pattern: $SET > $OTHERSET
      - pattern: $SET >= $OTHERSET
  - patterns:
    - pattern-either:
      - pattern-inside: '$TUPLE = ( $ITEM, ... )

          ...

          '
      - pattern-inside: '$TUPLE = $ITEM, ...

          ...

          '
      - pattern-inside: '$TUPLE = tuple(...)

          ...

          '
    - pattern-either:
      - pattern: $TUPLE.len()
  - pattern: urllib.parse.urlencode(...)
  - pattern: urllib.parse.quote(...)
  - pattern: urllib.parse.quote_plus(...)
  - pattern: urllib.urlencode(...)
  - pattern: urllib.quote(...)
  - pattern: urllib.quote_plus(...)
  - pattern: django.urls.reverse(...)
  - pattern: django.urls.base.reverse(...)
