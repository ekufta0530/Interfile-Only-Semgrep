rules:
- id: tainted-path-traversal-openpyxl-fastapi
  message: The application builds a file path from potentially untrusted data, which
    can lead to a path traversal vulnerability. An attacker can manipulate the path
    which the application uses to access files. If the application does not validate
    user input and sanitize file paths, sensitive files such as configuration or user
    data can be accessed, potentially creating or overwriting files. In FastAPI apps,
    consider using the Starlette `:path` annotation in the route declaration to automatically
    sanitize paths and filenames.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    functional-categories:
    - file::sink::file-access::openpyxl
    - web::source::cookie::fastapi
    - web::source::form-data::fastapi
    - web::source::header::fastapi
    - web::source::http-body::fastapi
    - web::source::http-params::fastapi
    - web::source::url-path-params::fastapi
    owasp:
    - A01:2021 - Broken Access Control
    - A05:2017 - Broken Access Control
    references:
    - https://docs.pyfilesystem.org/en/latest/guide.html#opening-filesystems
    - https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    - https://owasp.org/www-community/attacks/Path_Traversal
    - https://portswigger.net/web-security/file-path-traversal
    - https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename
    technology:
    - fastapi
    - file
    - openpyxl
    - web
  languages:
  - python
  mode: taint
  options:
    interfile: true
    symbolic_propagation: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - patterns:
    - pattern: "@$APP.$ROUTE(\"$ROUTESTRING\", ...)\nasync def $FUNC(..., $PARAM,\
        \ ...):\n  ...\n"
    - metavariable-comparison:
        comparison: str($PARAM) not in $ROUTESTRING
    - metavariable-regex:
        metavariable: $ROUTE
        regex: ^(websocket|get|put|post|delete|options|head|patch|trace)$
    - metavariable-type:
        metavariable: $PARAM
        types:
        - str | None
        - str
        - Optional[str]
        - typing.Union[str, None]
        - list[str] | None
        - list[str]
        - typing.List[str] | None
        - typing.List[str]
        - typing.Optional[typing.List[str]]
        - typing.Union[list[str], None]
        - fastapi.Query(...)
        - typing.Annotated[...,  fastapi.Query(...)]
        - fastapi.Path(...)
        - typing.Annotated[...,  fastapi.Path(...)]
        - fastapi.Body(...)
        - typing.Annotated[...,  fastapi.Body(...)]
        - fastapi.Cookie(...)
        - typing.Annotated[...,  fastapi.Cookie(...)]
        - fastapi.Header(...)
        - typing.Annotated[...,  fastapi.Header(...)]
        - fastapi.Form(...)
        - typing.Annotated[...,  fastapi.Form(...)]
        - fastapi.File(...)
        - fastapi.UploadFile
        - typing.List[fastapi.UploadFile]
        - list[fastapi.UploadFile]
        - typing.Annotated[...,  fastapi.File(...)]
        - pydantic.BaseModel
        - typing.Annotated[..., fastapi.Cookie()]
        - fastapi.Cookie(...)
        - typing.Annotated[..., fastapi.Header()]
        - fastapi.Header(...)
    - focus-metavariable: $PARAM
  - label: FASTAPI_REQUEST
    patterns:
    - patterns:
      - pattern-either:
        - pattern: "@$APP.middleware(...)\nasync def $FUNC($FASTAPI_REQUEST, ...):\n\
            \  ...\n"
        - patterns:
          - pattern: "def $FUNC(..., $FASTAPI_REQUEST, ...):\n  ...\n"
          - metavariable-type:
              metavariable: $FASTAPI_REQUEST
              types:
              - fastapi.Request
              - fastapi.requests.Request
              - starlette.requests.Request
      - focus-metavariable: $FASTAPI_REQUEST
  - label: __SOURCE__
    patterns:
    - patterns:
      - pattern-either:
        - pattern: $FASTAPI_REQUEST.url.path
        - pattern: $FASTAPI_REQUEST.base_url
        - pattern: $FASTAPI_REQUEST.headers
        - pattern: $FASTAPI_REQUEST.query_params
        - pattern: $FASTAPI_REQUEST.cookies
        - pattern: $FASTAPI_REQUEST.stream()
        - pattern: $FASTAPI_REQUEST.read(...)
        - pattern: $FASTAPI_REQUEST.form(...)
        - pattern: $FASTAPI_REQUEST._get_form(...)
        - pattern: $FASTAPI_REQUEST.body()
        - pattern: $FASTAPI_REQUEST.json()
    requires: FASTAPI_REQUEST
  pattern-propagators:
  - from: $DEFAULT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$DICT[$KEY]

            ...

            '
        - pattern-inside: '$DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$DICT = { ... }

            ...

            '
        - pattern-inside: '$DICT = dict(...)

            ...

            '
      - pattern-either:
        - pattern: $DICT.get($FIELD, $DEFAULT)
        - pattern: $DICT.setdefault($KEY, $DEFAULT)
    to: $DICT
  - from: $FROM_DICT
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$TO_DICT[$KEY]

            ...

            '
        - pattern-inside: '$TO_DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$TO_DICT = { ... }

            ...

            '
        - pattern-inside: '$TO_DICT = dict(...)

            ...

            '
        - pattern-inside: '$FROM_DICT[$KEY]

            ...

            '
        - pattern-inside: '$FROM_DICT.get($KEY, $DEFAULT)

            ...

            '
        - pattern-inside: '$FROM_DICT = { ... }

            ...

            '
        - pattern-inside: '$FROM_DICT = dict(...)

            ...

            '
      - pattern-either:
        - pattern: $TO_DICT.update($FROM_DICT)
        - pattern: $TO_DICT | $FROM_DICT
        - pattern: $TO_DICT |= $FROM_DICT
    to: $TO_DICT
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$LIST = [ ... ]

            ...

            '
        - pattern-inside: '$LIST = list(...)

            ...

            '
      - pattern-either:
        - pattern: $LIST.append($FROM)
        - pattern: $LIST.extend($FROM)
        - pattern: $LIST.insert($INDEX, $FROM)
    to: $LIST
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern: $FROM.$LOG($SINK, ...)
        - pattern: $FROM.$LOG(..., msg=$SINK, ...)
        - pattern: $APP.logger.$LOG($SINK, ...)
      - metavariable-regex:
          metavariable: $LOG
          regex: ^(info|warning|error|critical|log|exception|handle)$
    to: $SINK
  - from: $FROM
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: '$SET = { $ITEM, ... }

            ...

            '
        - pattern-inside: '$SET = set(...)

            ...

            '
        - pattern-inside: '$OTHERSET = { $ITEM, ... }

            ...

            '
        - pattern-inside: '$OTHERSET = set(...)

            ...

            '
      - pattern-either:
        - pattern: $SET.update(..., $FROM, ...)
        - pattern: $SET.intersection_update(..., $FROM, ...)
        - pattern: $SET.difference_update(..., $FROM, ...)
        - pattern: $SET.symmetric_difference_update(..., $FROM, ...)
        - pattern: $SET.add($FROM)
        - pattern: $SET |= $FROM
        - pattern: $SET &= $FROM
        - pattern: $SET -= $FROM
        - pattern: $SET ^= $FROM
    to: $SET
  - from: $FORM
    patterns:
    - pattern: $FORM.populate_obj($OBJ)
    to: $OBJ
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: openpyxl.load_workbook($SINK, ...)
      - pattern: openpyxl.load_workbook(..., filename=$SINK, ...)
      - pattern: openpyxl.open($SINK, ...)
      - pattern: openpyxl.open(..., filename=$SINK, ...)
    - focus-metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern-inside: "class $CLS:\n  ...\n  $WB: openpyxl.Workbook\n  ...\n"
      - pattern-inside: "class $CLS:\n  ...\n  $WB: openpyxl.Workbook = ...\n  ...\n"
      - pattern-inside: "class $WB(..., openpyxl.Workbook, ...):\n  ...\n...\n"
      - pattern-inside: "def $FUN(..., $WB: openpyxl.Workbook, ...):\n  ...\n"
      - pattern-inside: '$WB: openpyxl.Workbook

          ...

          '
      - pattern-inside: '$WB: openpyxl.Workbook = ...

          ...

          '
      - pattern-inside: "if isinstance($WB, openpyxl.Workbook):\n  ...\n"
      - pattern-inside: "if isinstance($WB, (..., openpyxl.Workbook, ...)):\n  ...\n"
      - pattern-inside: "if type($WB) == openpyxl.Workbook:\n  ...\n"
      - pattern-inside: "class $CLS:\n  ...\n  $WB: openpyxl.workbook.Workbook\n \
          \ ...\n"
      - pattern-inside: "class $CLS:\n  ...\n  $WB: openpyxl.workbook.Workbook = ...\n\
          \  ...\n"
      - pattern-inside: "class $WB(..., openpyxl.workbook.Workbook, ...):\n  ...\n\
          ...\n"
      - pattern-inside: "def $FUN(..., $WB: openpyxl.workbook.Workbook, ...):\n  ...\n"
      - pattern-inside: '$WB: openpyxl.workbook.Workbook

          ...

          '
      - pattern-inside: '$WB: openpyxl.workbook.Workbook = ...

          ...

          '
      - pattern-inside: "if isinstance($WB, openpyxl.workbook.Workbook):\n  ...\n"
      - pattern-inside: "if isinstance($WB, (..., openpyxl.workbook.Workbook, ...)):\n\
          \  ...\n"
      - pattern-inside: "if type($WB) == openpyxl.workbook.Workbook:\n  ...\n"
      - pattern-inside: "class $CLS:\n  ...\n  $WB: openpyxl.workbook.workbook.Workbook\n\
          \  ...\n"
      - pattern-inside: "class $CLS:\n  ...\n  $WB: openpyxl.workbook.workbook.Workbook\
          \ = ...\n  ...\n"
      - pattern-inside: "class $WB(..., openpyxl.workbook.workbook.Workbook, ...):\n\
          \  ...\n...\n"
      - pattern-inside: "def $FUN(..., $WB: openpyxl.workbook.workbook.Workbook, ...):\n\
          \  ...\n"
      - pattern-inside: '$WB: openpyxl.workbook.workbook.Workbook

          ...

          '
      - pattern-inside: '$WB: openpyxl.workbook.workbook.Workbook = ...

          ...

          '
      - pattern-inside: "if isinstance($WB, openpyxl.workbook.workbook.Workbook):\n\
          \  ...\n"
      - pattern-inside: "if isinstance($WB, (..., openpyxl.workbook.workbook.Workbook,\
          \ ...)):\n  ...\n"
      - pattern-inside: "if type($WB) == openpyxl.workbook.workbook.Workbook:\n  ...\n"
      - pattern-inside: '$WB = openpyxl.Workbook(...)

          ...

          '
      - pattern-inside: '$WB = openpyxl.workbook.Workbook(...)

          ...

          '
      - pattern-inside: '$WB = openpyxl.workbook.workbook.Workbook(...)

          ...

          '
      - pattern-inside: '$WB = openpyxl.load_workbook(...)

          ...

          '
      - pattern-inside: '$WB = openpyxl.open(...)

          ...

          '
    - pattern-either:
      - pattern: $WB.save($SINK, ...)
      - pattern: $WB.save(..., filename=$SINK, ...)
    - focus-metavariable: $SINK
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: int(...)
      - pattern: bool(...)
      - pattern: float(...)
      - pattern: complex(...)
      - pattern: oct(...)
      - pattern: hex(...)
      - pattern: bin(...)
      - pattern: round(...)
      - pattern: id(...)
      - pattern: hash(...)
      - pattern: len(...)
      - pattern: type(...)
  - patterns:
    - pattern-either:
      - pattern-inside: '$DICT[$KEY]

          ...

          '
      - pattern-inside: '$DICT = { $KEY: $VALUE for ... in ...}

          ...

          '
      - pattern-inside: '$DICT.get($KEY, $DEFAULT)

          ...

          '
      - pattern-inside: '$DICT = { }

          ...

          '
      - pattern-inside: '$DICT = { $KEY: $VALUE, ... }

          ...

          '
      - pattern-inside: '$DICT = dict(...)

          ...

          '
    - pattern-either:
      - pattern: $DICT.clear()
      - pattern: $DICT.len()
  - patterns:
    - pattern-either:
      - pattern-inside: '$LIST = [ ... ]

          ...

          '
      - pattern-inside: '$LIST = list(...)

          ...

          '
    - pattern-either:
      - pattern: $LIST.clear()
      - pattern: $LIST.count(...)
      - pattern: $LIST.index(...)
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.len()
      - pattern: $SET.clear()
  - patterns:
    - pattern-either:
      - pattern-inside: '$SET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$SET = { $ITEM for ... in ...}

          ...

          '
      - pattern-inside: '$SET = set(...)

          ...

          '
      - pattern-inside: '$SET = frozenset(...)

          ...

          '
      - pattern-inside: '$OTHERSET = { $ITEM, ... }

          ...

          '
      - pattern-inside: '$OTHERSET = set(...)

          ...

          '
    - pattern-either:
      - pattern: $SET.isdisjoint($OTHERSET)
      - pattern: $SET.difference($OTHERSET)
      - pattern: $SET.issubset($OTHERSET)
      - pattern: $SET < $OTHERSET
      - pattern: $SET <= $OTHERSET
      - pattern: $SET.issuperset($OTHERSET)
      - pattern: $SET > $OTHERSET
      - pattern: $SET >= $OTHERSET
  - patterns:
    - pattern-either:
      - pattern-inside: '$TUPLE = ( $ITEM, ... )

          ...

          '
      - pattern-inside: '$TUPLE = $ITEM, ...

          ...

          '
      - pattern-inside: '$TUPLE = tuple(...)

          ...

          '
    - pattern-either:
      - pattern: $TUPLE.len()
  - patterns:
    - pattern: werkzeug.utils.secure_filename(...)
