rules:
- id: open-redirect
  message: The application builds a URL using user-controlled input which can lead
    to an open redirect vulnerability. An attacker can manipulate the URL and redirect
    users to an arbitrary domain. Open redirect vulnerabilities can lead to issues
    such as Cross-site scripting (XSS) or redirecting to a malicious domain for activities
    such as phishing to capture users' credentials. To prevent this vulnerability
    perform strict input validation of the domain against an allowlist of approved
    domains. Notify a user in your application that they are leaving the website.
    Display a domain where they are redirected to the user. A user can then either
    accept or deny the redirect to an untrusted site.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    functional-categories:
    - web::sink::redirect::HttpClient
    - web::source::cookie::Micronaut
    - web::source::form-data::Micronaut
    - web::source::header::Micronaut
    - web::source::http-body::Micronaut
    - web::source::http-params::Micronaut
    - web::source::url-path-params::Micronaut
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    technology:
    - Micronaut
    - java
  languages:
  - java
  mode: taint
  options:
    interfile: true
    taint_assume_safe_booleans: true
    taint_assume_safe_numbers: true
  pattern-sources:
  - label: REQ
    patterns:
    - pattern: '@io.micronaut.http.annotation.$METHOD(...)

        $T $FUNC(..., $TYPE $SOURCE, ...) {...}

        '
    - focus-metavariable: $SOURCE
    - metavariable-regex:
        metavariable: $METHOD
        regex: (Delete|Get|Head|Options|Patch|Put|Post|Trace|CustomHttpMethod)
    - metavariable-pattern:
        metavariable: $TYPE
        patterns:
        - patterns:
          - pattern-not-regex: ^Session$
  - label: REQ
    patterns:
    - pattern-either:
      - pattern: (io.micronaut.http.HttpRequest<$ANY> $REQ).$PARAM(...)
      - pattern: (io.micronaut.http.HttpRequest<?> $REQ).$PARAM(...)
      - pattern: (io.micronaut.http.HttpRequest $REQ).$PARAM(...)
    - metavariable-pattern:
        metavariable: $PARAM
        patterns:
        - patterns:
          - pattern-either:
            - pattern: getCookies
            - pattern: getLocale
            - pattern: getParameters
            - pattern: getPath
            - pattern: getUri
            - pattern: getBody
            - pattern: getContentType
            - pattern: getHeaders
  - label: NOT_CONCAT
    patterns:
    - focus-metavariable: $X
    - pattern-either:
      - pattern: $F + $X
      - pattern: String.format(..., $X, ...)
      - pattern: MessageFormat.format(..., $X, ...)
    - pattern-not: $X + $F
    - pattern-not: '"https://" + $X

        '
    - pattern-not: '"http://" + $X

        '
    - pattern-not: '"ws://" + $X

        '
    - pattern-not: '"wss://" + $X

        '
    - pattern-not: '"//" + $X

        '
    requires: REQ
  - label: HTTP_FORMAT
    patterns:
    - focus-metavariable: $X
    - pattern-either:
      - pattern: MessageFormat.format("$REGEX", $X,...)
      - pattern: String.format("$REGEX", $X,...)
    - metavariable-regex:
        metavariable: $REGEX
        regex: ^(http://|https://|//|ws://|wss://)%s.*
    requires: REQ
  - label: STRING_CONCAT
    patterns:
    - pattern-either:
      - pattern: '"...${$X}..."

          '
      - pattern: $F + $X
      - pattern: '"...".formatted(...)

          '
      - pattern: String.format(...)
      - pattern: MessageFormat.format(...)
    requires: REQ
  pattern-propagators:
  - from: $FROM
    patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: (java.util.List $TO).$METHOD(...)
          - pattern: (java.util.List<$E> $TO).$METHOD(...)
          - pattern: (java.util.Stack $TO).$METHOD(...)
          - pattern: (java.util.Stack<$E> $TO).$METHOD(...)
          - pattern: (java.util.Vector $TO).$METHOD(...)
          - pattern: (java.util.Vector<$E> $TO).$METHOD(...)
          - pattern: (java.util.ArrayList $TO).$METHOD(...)
          - pattern: (java.util.ArrayList<$E> $TO).$METHOD(...)
          - pattern: (java.util.LinkedList $TO).$METHOD(...)
          - pattern: (java.util.LinkedList<$E> $TO).$METHOD(...)
          - pattern: (java.util.AbstractList $TO).$METHOD(...)
          - pattern: (java.util.AbstractList<$E> $TO).$METHOD(...)
          - pattern: (java.util.AbstractSequentialList $TO).$METHOD(...)
          - pattern: (java.util.AbstractSequentialList<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.CopyOnWriteArrayList $TO).$METHOD(...)
          - pattern: (java.util.concurrent.CopyOnWriteArrayList<$E> $TO).$METHOD(...)
        - pattern-either:
          - pattern: $TO.add($FROM)
          - pattern: $TO.add($X, $FROM)
          - pattern: $TO.addAll($FROM)
          - pattern: $TO.addAll($X, $FROM)
          - pattern: $TO.addFirst(..., $FROM, ...)
          - pattern: $TO.addLast(..., $FROM, ...)
          - pattern: $TO.addAllAbsent(..., $FROM, ...)
          - pattern: $TO.addIfAbsent(..., $FROM, ...)
          - pattern: $TO.addElement(..., $FROM, ...)
          - pattern: $TO.set($X, $FROM)
          - pattern: $TO.push(..., $FROM, ...)
          - pattern: $TO.setElementAt(..., $FROM, ...)
          - pattern: $TO.replaceAll(..., $FROM, ...)
          - pattern: $TO.insertElementAt($FROM, ...)
      - patterns:
        - pattern-either:
          - pattern: (java.util.Queue $TO).$METHOD(...)
          - pattern: (java.util.Queue<$E> $TO).$METHOD(...)
          - pattern: (java.util.Deque $TO).$METHOD(...)
          - pattern: (java.util.Deque<$E> $TO).$METHOD(...)
          - pattern: (java.util.ArrayDeque $TO).$METHOD(...)
          - pattern: (java.util.ArrayDeque<$E> $TO).$METHOD(...)
          - pattern: (java.util.AbstractQueue $TO).$METHOD(...)
          - pattern: (java.util.AbstractQueue<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.DelayQueue $TO).$METHOD(...)
          - pattern: (java.util.concurrent.DelayQueue<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.BlockingQueue $TO).$METHOD(...)
          - pattern: (java.util.concurrent.BlockingQueue<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.TransferQueue $TO).$METHOD(...)
          - pattern: (java.util.concurrent.TransferQueue<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.BlockingDeque $TO).$METHOD(...)
          - pattern: (java.util.concurrent.BlockingDeque<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.SynchronousQueue $TO).$METHOD(...)
          - pattern: (java.util.concurrent.SynchronousQueue<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.LinkedTransferQueue $TO).$METHOD(...)
          - pattern: (java.util.concurrent.LinkedTransferQueue<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ArrayBlockingQueue $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ArrayBlockingQueue<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.LinkedBlockingDeque $TO).$METHOD(...)
          - pattern: (java.util.concurrent.LinkedBlockingDeque<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.LinkedBlockingQueue $TO).$METHOD(...)
          - pattern: (java.util.concurrent.LinkedBlockingQueue<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.PriorityBlockingQueue $TO).$METHOD(...)
          - pattern: (java.util.concurrent.PriorityBlockingQueue<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentLinkedDeque $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentLinkedDeque<$E> $TO).$METHOD(...)
        - pattern-either:
          - pattern: $TO.add(..., $FROM, ...)
          - pattern: $TO.addFirst(..., $FROM, ...)
          - pattern: $TO.addLast(..., $FROM, ...)
          - pattern: $TO.addAll(..., $FROM, ...)
          - pattern: $TO.put(..., $FROM, ...)
          - pattern: $TO.putLast(..., $FROM, ...)
          - pattern: $TO.putFirst(..., $FROM, ...)
          - pattern: $TO.push(..., $FROM, ...)
          - pattern: $TO.offer($FROM, ...)
          - pattern: $TO.offerLast($FROM, ...)
          - pattern: $TO.offerFirst($FROM, ...)
      - patterns:
        - pattern-either:
          - pattern: (java.util.Set $TO).$METHOD(...)
          - pattern: (java.util.Set<$E> $TO).$METHOD(...)
          - pattern: (java.util.TreeSet $TO).$METHOD(...)
          - pattern: (java.util.TreeSet<$E> $TO).$METHOD(...)
          - pattern: (java.util.EnumSet $TO).$METHOD(...)
          - pattern: (java.util.EnumSet<$E> $TO).$METHOD(...)
          - pattern: (java.util.HashSet $TO).$METHOD(...)
          - pattern: (java.util.HashSet<$E> $TO).$METHOD(...)
          - pattern: (java.util.SortedSet $TO).$METHOD(...)
          - pattern: (java.util.SortedSet<$E> $TO).$METHOD(...)
          - pattern: (java.util.AbstractSet $TO).$METHOD(...)
          - pattern: (java.util.AbstractSet<$E> $TO).$METHOD(...)
          - pattern: (java.util.NavigableSet $TO).$METHOD(...)
          - pattern: (java.util.NavigableSet<$E> $TO).$METHOD(...)
          - pattern: (java.util.LinkedHashSet $TO).$METHOD(...)
          - pattern: (java.util.LinkedHashSet<$E> $TO).$METHOD(...)
          - pattern: (java.util.AbstractCollection $TO).$METHOD(...)
          - pattern: (java.util.AbstractCollection<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.CopyOnWriteArraySet $TO).$METHOD(...)
          - pattern: (java.util.concurrent.CopyOnWriteArraySet<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentSkipListSet $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentSkipListSet<$E> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentHashMap.KeySetView $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentHashMap.KeySetView<$E> $TO).$METHOD(...)
        - pattern-either:
          - pattern: $TO.add(..., $FROM, ...)
          - pattern: $TO.addAll(..., $FROM, ...)
      - patterns:
        - pattern-either:
          - pattern: (java.util.Map $TO).$METHOD(...)
          - pattern: (java.util.Map<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.NavigableMap $TO).$METHOD(...)
          - pattern: (java.util.NavigableMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.SortedMap $TO).$METHOD(...)
          - pattern: (java.util.SortedMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.TreeMap $TO).$METHOD(...)
          - pattern: (java.util.TreeMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.AbstractMap $TO).$METHOD(...)
          - pattern: (java.util.AbstractMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.EnumMap $TO).$METHOD(...)
          - pattern: (java.util.EnumMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.HashMap $TO).$METHOD(...)
          - pattern: (java.util.HashMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.Hashtable $TO).$METHOD(...)
          - pattern: (java.util.Hashtable<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.IdentityHashMap $TO).$METHOD(...)
          - pattern: (java.util.IdentityHashMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.LinkedHashMap $TO).$METHOD(...)
          - pattern: (java.util.LinkedHashMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.WeakHashMap $TO).$METHOD(...)
          - pattern: (java.util.WeakHashMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentMap $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentHashMap $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentHashMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentSkipListMap $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentSkipListMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentNavigableMap $TO).$METHOD(...)
          - pattern: (java.util.concurrent.ConcurrentNavigableMap<$K, $V> $TO).$METHOD(...)
          - pattern: (java.util.Properties $TO).$METHOD(...)
          - pattern: (java.util.Properties<$K, $V> $TO).$METHOD(...)
        - pattern-either:
          - pattern: $TO.merge(..., $FROM, ...)
          - pattern: $TO.put(..., $FROM, ...)
          - pattern: $TO.putAll(..., $FROM, ...)
          - pattern: $TO.putIfAbsent(..., $FROM, ...)
          - pattern: $TO.replace($X, ..., $FROM, ...)
          - pattern: $TO.replaceAll(..., $FROM, ...)
    to: $TO
  - from: $INPUT
    patterns:
    - pattern-either:
      - pattern: String.format($FMT, ..., $INPUT, ...)
      - pattern: MessageFormat.format($FMT, ..., $INPUT, ...)
    to: $FMT
  - from: $FROM
    patterns:
    - pattern-either:
      - pattern: (StringBuilder $TO).append($FROM, ...)
      - pattern: (StringBuilder $TO).insert($OFFSET, $FROM, ...)
      - pattern: (StringBuilder $TO).replace($START, $END, $FROM, ...)
      - pattern: (StringBuffer $TO).append($FROM, ...)
      - pattern: (StringBuffer $TO).insert($OFFSET, $FROM, ...)
    to: $TO
  pattern-sinks:
  - patterns:
    - focus-metavariable: $URI
    - pattern-either:
      - pattern: io.micronaut.http.HttpResponse.redirect($URI,...)
      - pattern: io.micronaut.http.HttpResponse.permanentRedirect($URI,...)
      - pattern: io.micronaut.http.HttpResponse.temporaryRedirect($URI,...)
      - pattern: io.micronaut.http.HttpResponse.seeOther($URI,...)
      - patterns:
        - pattern: io.micronaut.http.HttpResponse. ... .header("$HEADER", $URI,...)
        - metavariable-regex:
            metavariable: $HEADER
            regex: (?i)location
    requires: (REQ and not STRING_CONCAT) or (REQ and STRING_CONCAT and not NOT_CONCAT)
      or HTTP_FORMAT
  pattern-sanitizers:
  - pattern: (ChoiceFormat $X).format(...)
  - pattern: (DecimalFormat $X).format(...)
  - pattern: (java.util.UUID $X)
  - patterns:
    - focus-metavariable: $X
    - pattern: io.micronaut.http.HttpRequest.$METHOD($URL, ..., $X, ...)
  - patterns:
    - pattern: io.micronaut.http.uri.UriBuilder. ... .$FUNC(...)
    - metavariable-pattern:
        metavariable: $FUNC
        patterns:
        - pattern-either:
          - pattern: path
          - pattern: expand
          - pattern: queryParam
  - patterns:
    - focus-metavariable: $X
    - pattern-either:
      - pattern: java.net.http.HttpRequest. ... .$FUNC(..., $X, ...)
      - pattern: (java.net.http.HttpRequest.Builder $B). ... .$FUNC(..., $X, ...)
    - metavariable-pattern:
        metavariable: $FUNC
        patterns:
        - pattern-not-regex: ^(newBuilder|uri)$
  - patterns:
    - focus-metavariable: $PARAM
    - pattern: $URLBUILDER. ... .addQueryParameter(..., $PARAM). ...
